\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k+kn}{from} \PYG{n+nn}{worldClass} \PYG{k+kn}{import} \PYG{o}{*}
\PYG{k+kn}{from} \PYG{n+nn}{newAgent} \PYG{k+kn}{import} \PYG{o}{*}
\PYG{k+kn}{from} \PYG{n+nn}{enemy} \PYG{k+kn}{import} \PYG{o}{*}
\PYG{k+kn}{from} \PYG{n+nn}{deepqlearning} \PYG{k+kn}{import} \PYG{o}{*}
\PYG{k+kn}{import} \PYG{n+nn}{random}\PYG{o}{,} \PYG{n+nn}{pygame}\PYG{o}{,} \PYG{n+nn}{math}

\PYG{c+c1}{\PYGZsh{} Interface class between Main and Every other class}
\PYG{k}{class} \PYG{n+nc}{Simulation}\PYG{p}{():}
    \PYG{k}{def} \PYG{n+nf+fm}{\PYGZus{}\PYGZus{}init\PYGZus{}\PYGZus{}}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{params}\PYG{p}{):} \PYG{c+c1}{\PYGZsh{} Constructor for Simulation}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary} \PYG{o}{=} \PYG{n}{params}

        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{worldMap} \PYG{o}{=} \PYG{k+kc}{None}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{network} \PYG{o}{=} \PYG{k+kc}{None}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{agent} \PYG{o}{=} \PYG{k+kc}{None}

        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{enemyList} \PYG{o}{=} \PYG{p}{[]}

        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{step} \PYG{o}{=} \PYG{l+m+mi}{0}

\PYG{c+c1}{\PYGZsh{} Step forward network methods}
    \PYG{k}{def} \PYG{n+nf}{TimeStep}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{):} \PYG{c+c1}{\PYGZsh{} Steps forward 1 cycle}
        \PYG{k}{if} \PYG{o+ow}{not} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{agent}\PYG{o}{.}\PYG{n}{alive}\PYG{p}{:} \PYG{c+c1}{\PYGZsh{} Resets Sim if Agent is dead}
            \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{ResetOnDeath}\PYG{p}{()}

        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{network}\PYG{o}{.}\PYG{n}{TakeStep}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{agent}\PYG{p}{,} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{worldMap}\PYG{p}{,} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{enemyList}\PYG{p}{)} \PYG{c+c1}{\PYGZsh{} Take step with Deep Q Network}

        \PYG{k}{if} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{[}\PYG{l+s+s2}{\PYGZdq{}EnableEnemies\PYGZdq{}}\PYG{p}{]:} \PYG{c+c1}{\PYGZsh{} If enemies enabled then update enemies}
            \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{UpdateEnemies}\PYG{p}{()}

        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{step} \PYG{o}{+=} \PYG{l+m+mi}{1} 

    \PYG{k}{def} \PYG{n+nf}{UpdateEnemies}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{):} \PYG{c+c1}{\PYGZsh{} Updates Enemies}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{enemyList} \PYG{o}{=} \PYG{p}{[}\PYG{n}{x} \PYG{k}{for} \PYG{n}{x} \PYG{o+ow}{in} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{enemyList} \PYG{k}{if} \PYG{n}{x} \PYG{o+ow}{is} \PYG{o+ow}{not} \PYG{k+kc}{None}\PYG{p}{]} \PYG{c+c1}{\PYGZsh{} Clears None type from list}

        \PYG{k}{for} \PYG{n}{i} \PYG{o+ow}{in} \PYG{n+nb}{range}\PYG{p}{(}\PYG{n+nb}{len}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{enemyList}\PYG{p}{)):} \PYG{c+c1}{\PYGZsh{} Commits each Enemies actions and sets to None if they died in that step}
            \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{enemyList}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]}\PYG{o}{.}\PYG{n}{CommitAction}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{agent}\PYG{p}{,} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{worldMap}\PYG{p}{)}

            \PYG{k}{if} \PYG{o+ow}{not} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{enemyList}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]}\PYG{o}{.}\PYG{n}{alive}\PYG{p}{:} \PYG{c+c1}{\PYGZsh{} Removes dead enemies from list}
                \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{enemyList}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{=} \PYG{k+kc}{None}

        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{enemyList} \PYG{o}{=} \PYG{p}{[}\PYG{n}{x} \PYG{k}{for} \PYG{n}{x} \PYG{o+ow}{in} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{enemyList} \PYG{k}{if} \PYG{n}{x} \PYG{o+ow}{is} \PYG{o+ow}{not} \PYG{k+kc}{None}\PYG{p}{]} \PYG{c+c1}{\PYGZsh{} Clears None type from list}

\PYG{c+c1}{\PYGZsh{} Creation and Initialisation Methods}
    \PYG{k}{def} \PYG{n+nf}{InitiateSimulation}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{):} \PYG{c+c1}{\PYGZsh{} Initialises Simulation}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{CreateWorld}\PYG{p}{()}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{CreateAgent}\PYG{p}{()}

        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{CreateDeepQNetwork}\PYG{p}{()}

    \PYG{k}{def} \PYG{n+nf}{CreateWorld}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{seed} \PYG{o}{=} \PYG{l+m+mi}{0}\PYG{p}{):} \PYG{c+c1}{\PYGZsh{} Creates new world with specified or random seed}
        \PYG{k}{if} \PYG{n}{seed} \PYG{o}{==} \PYG{l+m+mi}{0}\PYG{p}{:} \PYG{n}{seed} \PYG{o}{=} \PYG{n}{random}\PYG{o}{.}\PYG{n}{randint}\PYG{p}{(}\PYG{l+m+mi}{0}\PYG{p}{,} \PYG{l+m+mi}{999999}\PYG{p}{)}
        
        \PYG{k}{if} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{worldMap} \PYG{o}{==} \PYG{k+kc}{None}\PYG{p}{:} \PYG{c+c1}{\PYGZsh{} Creates a new world map if one does not exist \PYGZhy{} otherwise resets the seed}
            \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{worldMap} \PYG{o}{=} \PYG{n}{WorldMap}\PYG{p}{(}\PYG{n}{seed}\PYG{p}{,} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{)}
        \PYG{k}{else}\PYG{p}{:}
            \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{worldMap}\PYG{o}{.}\PYG{n}{MAP\PYGZus{}SEED} \PYG{o}{=} \PYG{n}{seed}

        \PYG{k}{if} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{[}\PYG{l+s+s2}{\PYGZdq{}GenerateThreaded\PYGZdq{}}\PYG{p}{]:} \PYG{c+c1}{\PYGZsh{} Generates Terrain using 4 threads if specified}
            \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{worldMap}\PYG{o}{.}\PYG{n}{GenerateThreadedParent}\PYG{p}{()}
        \PYG{k}{else}\PYG{p}{:}
            \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{worldMap}\PYG{o}{.}\PYG{n}{GenerateMap}\PYG{p}{()}

        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{worldMap}\PYG{o}{.}\PYG{n}{GenerateTreeArea}\PYG{p}{()} \PYG{c+c1}{\PYGZsh{} Generates Tree Area}

        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{worldMap}\PYG{o}{.}\PYG{n}{RenderMap}\PYG{p}{()} \PYG{c+c1}{\PYGZsh{} Renders Map and Renders Interactables}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{worldMap}\PYG{o}{.}\PYG{n}{RenderInteractables}\PYG{p}{()} 

        \PYG{k}{if} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{[}\PYG{l+s+s2}{\PYGZdq{}EnableEnemies\PYGZdq{}}\PYG{p}{]:} \PYG{c+c1}{\PYGZsh{} Spawns Enemies if specified}
            \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{SpawnEnemies}\PYG{p}{()}

        \PYG{n+nb}{print}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}Created New World, Seed: }\PYG{l+s+si}{\PYGZob{}\PYGZcb{}}\PYG{l+s+s2}{\PYGZdq{}}\PYG{o}{.}\PYG{n}{format}\PYG{p}{(}\PYG{n}{seed}\PYG{p}{))}

    \PYG{k}{def} \PYG{n+nf}{CreateDeepQNetwork}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{layers} \PYG{o}{=} \PYG{k+kc}{None}\PYG{p}{):} \PYG{c+c1}{\PYGZsh{} Creates a Deep Q Network with the given Hyper Parameters}
        \PYG{k}{if} \PYG{n}{layers} \PYG{o}{==} \PYG{k+kc}{None}\PYG{p}{:}
            \PYG{n}{layers} \PYG{o}{=} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{[}\PYG{l+s+s2}{\PYGZdq{}DeepQLearningLayers\PYGZdq{}}\PYG{p}{]}

        \PYG{k}{if} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{network} \PYG{o}{==} \PYG{k+kc}{None}\PYG{p}{:} \PYG{c+c1}{\PYGZsh{} Creates a Network if one doesnt already exist}
            \PYG{k}{if} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{[}\PYG{l+s+s2}{\PYGZdq{}EnterValues\PYGZdq{}}\PYG{p}{]:}
                \PYG{n}{load} \PYG{o}{=} \PYG{n+nb}{input}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}Load weights (Y/N): \PYGZdq{}}\PYG{p}{)}
                \PYG{k}{if} \PYG{n}{load}\PYG{o}{.}\PYG{n}{upper}\PYG{p}{()} \PYG{o}{==} \PYG{l+s+s2}{\PYGZdq{}Y\PYGZdq{}}\PYG{p}{:}
                    \PYG{n}{fName} \PYG{o}{=} \PYG{n+nb}{input}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}State file name: \PYGZdq{}}\PYG{p}{)}

                    \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{network} \PYG{o}{=} \PYG{n}{DoubleNeuralNet}\PYG{p}{(}\PYG{n}{layers}\PYG{p}{,} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{,} \PYG{n}{load}\PYG{o}{=}\PYG{k+kc}{True}\PYG{p}{,} \PYG{n}{loadName}\PYG{o}{=}\PYG{n}{fName}\PYG{p}{)}
                \PYG{k}{else}\PYG{p}{:}
                    \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{network} \PYG{o}{=} \PYG{n}{DoubleNeuralNet}\PYG{p}{(}\PYG{n}{layers}\PYG{p}{,} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{)}
            \PYG{k}{else}\PYG{p}{:}
                \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{network} \PYG{o}{=} \PYG{n}{DoubleNeuralNet}\PYG{p}{(}\PYG{n}{layers}\PYG{p}{,} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{)}

    \PYG{k}{def} \PYG{n+nf}{CreateAgent}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{):} \PYG{c+c1}{\PYGZsh{} Creates an agent / Resets existing agent}
        \PYG{k}{if} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{agent} \PYG{o}{==} \PYG{k+kc}{None}\PYG{p}{:}
            \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{agent} \PYG{o}{=} \PYG{n}{Agent}\PYG{p}{(}\PYG{n}{Agent}\PYG{o}{.}\PYG{n}{SpawnPosition}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{worldMap}\PYG{p}{),} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{)}
        \PYG{k}{else}\PYG{p}{:}
            \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{agent}\PYG{o}{.}\PYG{n}{Reset}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{worldMap}\PYG{p}{)}

    \PYG{k}{def} \PYG{n+nf}{SpawnEnemies}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{n} \PYG{o}{=} \PYG{l+m+mi}{0}\PYG{p}{):} \PYG{c+c1}{\PYGZsh{} Spawns \PYGZlt{}= n enemies on call}
        \PYG{k}{if} \PYG{n}{n} \PYG{o}{==} \PYG{l+m+mi}{0}\PYG{p}{:} \PYG{n}{n} \PYG{o}{=} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{[}\PYG{l+s+s2}{\PYGZdq{}StartEnemyCount\PYGZdq{}}\PYG{p}{]}
        
        \PYG{k}{for} \PYG{n}{count} \PYG{o+ow}{in} \PYG{n+nb}{range}\PYG{p}{(}\PYG{n}{n}\PYG{p}{):} \PYG{c+c1}{\PYGZsh{} Spawns enemies for count}
            \PYG{n}{spawnLoc} \PYG{o}{=} \PYG{n}{Enemy}\PYG{o}{.}\PYG{n}{SpawnPosition}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{worldMap}\PYG{p}{,} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{enemyList}\PYG{p}{)}
            \PYG{k}{if} \PYG{n}{spawnLoc} \PYG{o}{==} \PYG{k+kc}{None}\PYG{p}{:}
                \PYG{k}{continue}
            \PYG{k}{else}\PYG{p}{:}
                \PYG{n}{tempEnemy} \PYG{o}{=} \PYG{n}{Enemy}\PYG{p}{(}\PYG{n}{spawnLoc}\PYG{p}{,} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{)}
                \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{enemyList}\PYG{o}{.}\PYG{n}{append}\PYG{p}{(}\PYG{n}{tempEnemy}\PYG{p}{)}

    \PYG{k}{def} \PYG{n+nf}{ResetOnDeath}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{):} \PYG{c+c1}{\PYGZsh{} Resets Simulation if Agent Dies}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{CreateWorld}\PYG{p}{()}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{CreateAgent}\PYG{p}{()}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{enemyList} \PYG{o}{=} \PYG{p}{[]}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{SpawnEnemies}\PYG{p}{()}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{step} \PYG{o}{=} \PYG{l+m+mi}{0}

\PYG{c+c1}{\PYGZsh{} Render Methods}
    \PYG{k}{def} \PYG{n+nf}{RenderToCanvas}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{window}\PYG{p}{):} \PYG{c+c1}{\PYGZsh{} Render Content to Canvas}
        \PYG{n}{TW} \PYG{o}{=} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{[}\PYG{l+s+s2}{\PYGZdq{}TileWidth\PYGZdq{}}\PYG{p}{]}
        \PYG{n}{DS} \PYG{o}{=} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{[}\PYG{l+s+s2}{\PYGZdq{}DebugScale\PYGZdq{}}\PYG{p}{]}

        \PYG{k}{if} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{[}\PYG{l+s+s2}{\PYGZdq{}Debug\PYGZdq{}}\PYG{p}{]:} \PYG{c+c1}{\PYGZsh{} Renders debug info for Neural Network if specified}
            \PYG{k}{for} \PYG{n}{i} \PYG{o+ow}{in} \PYG{n+nb}{range}\PYG{p}{(}\PYG{n+nb}{len}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{network}\PYG{o}{.}\PYG{n}{MainNetwork}\PYG{o}{.}\PYG{n}{layers}\PYG{p}{)):}
                \PYG{k}{for} \PYG{n}{k} \PYG{o+ow}{in} \PYG{n+nb}{range}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{network}\PYG{o}{.}\PYG{n}{MainNetwork}\PYG{o}{.}\PYG{n}{layers}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]}\PYG{o}{.}\PYG{n}{outputVector}\PYG{o}{.}\PYG{n}{order}\PYG{p}{[}\PYG{l+m+mi}{0}\PYG{p}{]):}
                    \PYG{n}{value} \PYG{o}{=} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{network}\PYG{o}{.}\PYG{n}{MainNetwork}\PYG{o}{.}\PYG{n}{layers}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]}\PYG{o}{.}\PYG{n}{outputVector}\PYG{o}{.}\PYG{n}{matrixVals}\PYG{p}{[}\PYG{n}{k}\PYG{p}{][}\PYG{l+m+mi}{0}\PYG{p}{]}
                    \PYG{n}{newVal} \PYG{o}{=} \PYG{p}{(}\PYG{n}{math}\PYG{o}{.}\PYG{n}{tanh}\PYG{p}{(}\PYG{n}{value}\PYG{p}{)} \PYG{o}{+} \PYG{l+m+mi}{1}\PYG{p}{)} \PYG{o}{/} \PYG{l+m+mi}{2}
                    \PYG{n}{colourTuple} \PYG{o}{=} \PYG{p}{(}\PYG{l+m+mi}{255} \PYG{o}{*} \PYG{n}{newVal}\PYG{p}{,} \PYG{l+m+mi}{255} \PYG{o}{*} \PYG{n}{newVal}\PYG{p}{,} \PYG{l+m+mi}{255} \PYG{o}{*} \PYG{n}{newVal}\PYG{p}{)}

                    \PYG{k}{try}\PYG{p}{:} \PYG{c+c1}{\PYGZsh{} Exceps if colour value out of range}
                        \PYG{n}{pygame}\PYG{o}{.}\PYG{n}{draw}\PYG{o}{.}\PYG{n}{rect}\PYG{p}{(}\PYG{n}{window}\PYG{p}{,} \PYG{n}{colourTuple}\PYG{p}{,} \PYG{p}{((}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{[}\PYG{l+s+s2}{\PYGZdq{}WorldSize\PYGZdq{}}\PYG{p}{]} \PYG{o}{*} \PYG{n}{TW} \PYG{o}{+} \PYG{n}{i} \PYG{o}{*} \PYG{n}{TW} \PYG{o}{*} \PYG{n}{DS}\PYG{p}{),} \PYG{p}{(}\PYG{n}{k} \PYG{o}{*} \PYG{n}{TW} \PYG{o}{*} \PYG{n}{DS}\PYG{p}{),} \PYG{p}{(}\PYG{n}{TW} \PYG{o}{*} \PYG{n}{DS}\PYG{p}{),} \PYG{p}{(}\PYG{n}{TW} \PYG{o}{*} \PYG{n}{DS}\PYG{p}{)))}
                    \PYG{k}{except}\PYG{p}{:}
                        \PYG{n+nb}{print}\PYG{p}{(}\PYG{n}{newVal}\PYG{p}{)}

        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{worldMap}\PYG{o}{.}\PYG{n}{DrawMap}\PYG{p}{(}\PYG{n}{window}\PYG{p}{)} \PYG{c+c1}{\PYGZsh{} Draws Content to window }

        \PYG{k}{for} \PYG{n}{i} \PYG{o+ow}{in} \PYG{n+nb}{range}\PYG{p}{(}\PYG{n+nb}{len}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{enemyList}\PYG{p}{)):} \PYG{c+c1}{\PYGZsh{} Draws enemies to window}
            \PYG{n}{pygame}\PYG{o}{.}\PYG{n}{draw}\PYG{o}{.}\PYG{n}{rect}\PYG{p}{(}\PYG{n}{window}\PYG{p}{,} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{[}\PYG{l+s+s2}{\PYGZdq{}ColourEnemy\PYGZdq{}}\PYG{p}{],} \PYG{p}{((}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{enemyList}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]}\PYG{o}{.}\PYG{n}{location}\PYG{p}{[}\PYG{l+m+mi}{0}\PYG{p}{]} \PYG{o}{*} \PYG{n}{TW}\PYG{p}{),} \PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{enemyList}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]}\PYG{o}{.}\PYG{n}{location}\PYG{p}{[}\PYG{l+m+mi}{1}\PYG{p}{]} \PYG{o}{*} \PYG{n}{TW}\PYG{p}{),} \PYG{n}{TW}\PYG{p}{,} \PYG{n}{TW}\PYG{p}{))}

        \PYG{c+c1}{\PYGZsh{} Draws Player to window}
        \PYG{n}{pygame}\PYG{o}{.}\PYG{n}{draw}\PYG{o}{.}\PYG{n}{rect}\PYG{p}{(}\PYG{n}{window}\PYG{p}{,} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{paramDictionary}\PYG{p}{[}\PYG{l+s+s2}{\PYGZdq{}ColourPlayer\PYGZdq{}}\PYG{p}{],} \PYG{p}{((}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{agent}\PYG{o}{.}\PYG{n}{location}\PYG{p}{[}\PYG{l+m+mi}{0}\PYG{p}{]} \PYG{o}{*} \PYG{n}{TW}\PYG{p}{),} \PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{agent}\PYG{o}{.}\PYG{n}{location}\PYG{p}{[}\PYG{l+m+mi}{1}\PYG{p}{]} \PYG{o}{*} \PYG{n}{TW}\PYG{p}{),} \PYG{n}{TW}\PYG{p}{,} \PYG{n}{TW}\PYG{p}{))}

\PYG{c+c1}{\PYGZsh{} Miscellaneous Methods}
    \PYG{n+nd}{@staticmethod}
    \PYG{k}{def} \PYG{n+nf}{LoadParameters}\PYG{p}{(}\PYG{n}{fname}\PYG{p}{):} \PYG{c+c1}{\PYGZsh{} Load Parameters from file and store them in a dictionary}
        \PYG{n}{file} \PYG{o}{=} \PYG{n+nb}{open}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}Parameters}\PYG{l+s+se}{\PYGZbs{}\PYGZbs{}}\PYG{l+s+si}{\PYGZob{}\PYGZcb{}}\PYG{l+s+s2}{.param\PYGZdq{}}\PYG{o}{.}\PYG{n}{format}\PYG{p}{(}\PYG{n}{fname}\PYG{p}{),} \PYG{l+s+s2}{\PYGZdq{}r\PYGZdq{}}\PYG{p}{)}
        \PYG{n}{params} \PYG{o}{=} \PYG{n}{json}\PYG{o}{.}\PYG{n}{loads}\PYG{p}{(}\PYG{n}{file}\PYG{o}{.}\PYG{n}{read}\PYG{p}{())}
        \PYG{n}{file}\PYG{o}{.}\PYG{n}{close}\PYG{p}{()}
        \PYG{k}{return} \PYG{n}{params}

    \PYG{n+nd}{@staticmethod}
    \PYG{k}{def} \PYG{n+nf}{CheckParameters}\PYG{p}{(}\PYG{n}{params}\PYG{p}{,} \PYG{n}{fname}\PYG{p}{):} \PYG{c+c1}{\PYGZsh{} Checks every parameter against the range.parm file}
        \PYG{n}{file} \PYG{o}{=} \PYG{n+nb}{open}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}Parameters}\PYG{l+s+se}{\PYGZbs{}\PYGZbs{}}\PYG{l+s+si}{\PYGZob{}\PYGZcb{}}\PYG{l+s+s2}{.param\PYGZdq{}}\PYG{o}{.}\PYG{n}{format}\PYG{p}{(}\PYG{n}{fname}\PYG{p}{),} \PYG{l+s+s2}{\PYGZdq{}r\PYGZdq{}}\PYG{p}{)} \PYG{c+c1}{\PYGZsh{} Read range file}
        \PYG{n}{paramRanges} \PYG{o}{=} \PYG{n}{json}\PYG{o}{.}\PYG{n}{loads}\PYG{p}{(}\PYG{n}{file}\PYG{o}{.}\PYG{n}{read}\PYG{p}{())} \PYG{c+c1}{\PYGZsh{} Load with json module}
        \PYG{n}{file}\PYG{o}{.}\PYG{n}{close}\PYG{p}{()}

        \PYG{k}{for} \PYG{n}{param} \PYG{o+ow}{in} \PYG{n}{params}\PYG{p}{:} \PYG{c+c1}{\PYGZsh{} Checks if parameter is specified in range file \PYGZhy{} If specified than check against given value to check within range}
            \PYG{k}{if} \PYG{n}{param} \PYG{o+ow}{in} \PYG{n}{paramRanges}\PYG{p}{:}
                \PYG{n}{valRange} \PYG{o}{=} \PYG{n}{paramRanges}\PYG{p}{[}\PYG{n}{param}\PYG{p}{]}
                \PYG{n}{val} \PYG{o}{=} \PYG{n}{params}\PYG{p}{[}\PYG{n}{param}\PYG{p}{]}

                \PYG{k}{if} \PYG{n}{valRange}\PYG{p}{[}\PYG{l+m+mi}{1}\PYG{p}{]} \PYG{o}{==} \PYG{k+kc}{None}\PYG{p}{:} \PYG{k}{pass}
                \PYG{k}{elif} \PYG{n}{val} \PYG{o}{\PYGZgt{}} \PYG{n}{valRange}\PYG{p}{[}\PYG{l+m+mi}{1}\PYG{p}{]:}
                    \PYG{k}{raise} \PYG{n+ne}{Exception}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}\PYGZsq{}}\PYG{l+s+si}{\PYGZob{}\PYGZcb{}}\PYG{l+s+s2}{\PYGZsq{} of value }\PYG{l+s+si}{\PYGZob{}\PYGZcb{}}\PYG{l+s+s2}{, has exceeded the range: }\PYG{l+s+si}{\PYGZob{}\PYGZcb{}}\PYG{l+s+s2}{\PYGZhy{}}\PYG{l+s+si}{\PYGZob{}\PYGZcb{}}\PYG{l+s+s2}{\PYGZdq{}}\PYG{o}{.}\PYG{n}{format}\PYG{p}{(}\PYG{n}{param}\PYG{p}{,} \PYG{n}{val}\PYG{p}{,} \PYG{n}{valRange}\PYG{p}{[}\PYG{l+m+mi}{0}\PYG{p}{],} \PYG{n}{valRange}\PYG{p}{[}\PYG{l+m+mi}{1}\PYG{p}{]))} \PYG{c+c1}{\PYGZsh{} Greater than specified range}

                \PYG{k}{if} \PYG{n}{valRange}\PYG{p}{[}\PYG{l+m+mi}{1}\PYG{p}{]} \PYG{o}{==} \PYG{k+kc}{None}\PYG{p}{:} \PYG{k}{pass}
                \PYG{k}{elif} \PYG{n}{val} \PYG{o}{\PYGZlt{}} \PYG{n}{valRange}\PYG{p}{[}\PYG{l+m+mi}{0}\PYG{p}{]:}
                    \PYG{k}{raise} \PYG{n+ne}{Exception}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}\PYGZsq{}}\PYG{l+s+si}{\PYGZob{}\PYGZcb{}}\PYG{l+s+s2}{\PYGZsq{} of value }\PYG{l+s+si}{\PYGZob{}\PYGZcb{}}\PYG{l+s+s2}{, has subceeded the range: }\PYG{l+s+si}{\PYGZob{}\PYGZcb{}}\PYG{l+s+s2}{\PYGZhy{}}\PYG{l+s+si}{\PYGZob{}\PYGZcb{}}\PYG{l+s+s2}{\PYGZdq{}}\PYG{o}{.}\PYG{n}{format}\PYG{p}{(}\PYG{n}{param}\PYG{p}{,} \PYG{n}{val}\PYG{p}{,} \PYG{n}{valRange}\PYG{p}{[}\PYG{l+m+mi}{0}\PYG{p}{],} \PYG{n}{valRange}\PYG{p}{[}\PYG{l+m+mi}{1}\PYG{p}{]))} \PYG{c+c1}{\PYGZsh{} Less than specified range}

        \PYG{n+nb}{print}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}Parameters within Specified Ranges\PYGZdq{}}\PYG{p}{)}
\end{Verbatim}
